package org.fisco.bcos.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Order extends Contract {
    public static final String[] BINARY_ARRAY = {"", "", "", "", "60029004801561402c5780601f106140015761010080835404028352916020019161402c565b820191906000526020600020905b81548152906001019060200180831161400f57829003601f168201915b505050505086613218565b8061410057506140ff60028381548110151561404f57fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140f45780601f106140c9576101008083540402835291602001916140f4565b820191906000526020600020905b8154815290600101906020018083116140d757829003601f168201915b505050505086613218565b5b1561410e5782806001019350505b8180600101925050613f68565b8260405190808252806020026020018201604052801561414a5781602001602082028038833980820191505090505b50905060009250600091505b6002805490508210156143265761422560028381548110151561417557fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561421a5780601f106141ef5761010080835404028352916020019161421a565b820191906000526020600020905b8154815290600101906020018083116141fd57829003601f168201915b505050505086613218565b806142ee57506142ed60028381548110151561423d57fe5b90600052602060002090600702016002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156142e25780601f106142b7576101008083540402835291602001916142e2565b820191906000526020600020905b8154815290600101906020018083116142c557829003601f168201915b505050505086613218565b5b156143195781818481518110151561430257fe5b906020019060200201818152505082806001019350505b8180600101925050614156565b809350505050919050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606080606080606060008088955087945084518651016040519080825280601f01601f1916602001820160405280156143bc5781602001602082028038833980820191505090505b50935083925060009150600090505b855181101561447e5785818151811015156143e257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561444157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506143cb565b600090505b845181101561453657848181518110151561449a57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156144f957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050614483565b83965050505050505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061458657805160ff19168380011785556145b4565b828001600101855582156145b4579182015b828111156145b3578251825591602001919060010190614598565b5b5090506145c1919061466e565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061460657805160ff1916838001178555614634565b82800160010185558215614634579182015b82811115614633578251825591602001919060010190614618565b5b509050614641919061466e565b5090565b61014060405190810160405280600a905b60608152602001906001900390816146565790505090565b61469091905b8082111561468c576000816000905550600101614674565b5090565b905600a165627a7a72305820aa6c378e1c0556fb285568c8c6e2bc0c1bb625ee281e1d2e98fbf6d121044b940029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"getReturnReasonByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_orderId\",\"type\":\"string\"},{\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"applyForReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyer\",\"type\":\"string\"},{\"name\":\"_seller\",\"type\":\"string\"},{\"name\":\"_time\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_petPrice\",\"type\":\"uint16\"}],\"name\":\"createOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"string\"},{\"name\":\"orderBuyer\",\"type\":\"string\"},{\"name\":\"orderSeller\",\"type\":\"string\"},{\"name\":\"orderTime\",\"type\":\"string\"},{\"name\":\"petId\",\"type\":\"string\"},{\"name\":\"petPrice\",\"type\":\"uint16\"},{\"name\":\"orderStatus\",\"type\":\"uint8\"},{\"name\":\"returnReason\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"userGetOrderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"acceptReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"isPetOnReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"stringEqual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_orderIndex\",\"type\":\"uint256\"}],\"name\":\"adminGetOrderByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"adminGetReturnOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"rejectReturn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"userGetOrderIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_mkAddress\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_orderId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"ApplyForReturnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"AcceptReturnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_orderId\",\"type\":\"string\"}],\"name\":\"RejectReturnEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_GETRETURNREASONBYINDEX = "getReturnReasonByIndex";

    public static final String FUNC_APPLYFORRETURN = "applyForReturn";

    public static final String FUNC_CREATEORDER = "createOrder";

    public static final String FUNC_ORDERLIST = "orderList";

    public static final String FUNC_USERGETORDERBYINDEX = "userGetOrderByIndex";

    public static final String FUNC_ACCEPTRETURN = "acceptReturn";

    public static final String FUNC_ADMINGETORDERINDEX = "adminGetOrderIndex";

    public static final String FUNC_ISPETONRETURN = "isPetOnReturn";

    public static final String FUNC_STRINGEQUAL = "stringEqual";

    public static final String FUNC_ADMINGETORDERBYINDEX = "adminGetOrderByIndex";

    public static final String FUNC_ADMINGETRETURNORDERINDEX = "adminGetReturnOrderIndex";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_REJECTRETURN = "rejectReturn";

    public static final String FUNC_USERGETORDERINDEX = "userGetOrderIndex";

    public static final String FUNC_SETMARKETADDRESS = "setMarketAddress";

    public static final String FUNC_STRCONCAT = "strConcat";

    public static final Event APPLYFORRETURNEVENT_EVENT = new Event("ApplyForReturnEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event ACCEPTRETURNEVENT_EVENT = new Event("AcceptReturnEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    public static final Event REJECTRETURNEVENT_EVENT = new Event("RejectReturnEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
            }, new TypeReference<Utf8String>() {
            }));
    ;

    @Deprecated
    protected Order(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Order(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Order(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Order(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<String> getReturnReasonByIndex(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_GETRETURNREASONBYINDEX,
                Arrays.<Type>asList(new Uint256(_orderIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> applyForReturn(String _id, String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN,
                Arrays.<Type>asList(new Utf8String(_id),
                        new Utf8String(_orderId),
                        new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void applyForReturn(String _id, String _orderId, String _reason, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN,
                Arrays.<Type>asList(new Utf8String(_id),
                        new Utf8String(_orderId),
                        new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String applyForReturnSeq(String _id, String _orderId, String _reason) {
        final Function function = new Function(
                FUNC_APPLYFORRETURN,
                Arrays.<Type>asList(new Utf8String(_id),
                        new Utf8String(_orderId),
                        new Utf8String(_reason)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getApplyForReturnInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_APPLYFORRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
        );
    }

    public Tuple1<Boolean> getApplyForReturnOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_APPLYFORRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice) {
        final Function function = new Function(
                FUNC_CREATEORDER,
                Arrays.<Type>asList(new Utf8String(_buyer),
                        new Utf8String(_seller),
                        new Utf8String(_time),
                        new Utf8String(_petId),
                        new Uint16(_petPrice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createOrder(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEORDER,
                Arrays.<Type>asList(new Utf8String(_buyer),
                        new Utf8String(_seller),
                        new Utf8String(_time),
                        new Utf8String(_petId),
                        new Uint16(_petPrice)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createOrderSeq(String _buyer, String _seller, String _time, String _petId, BigInteger _petPrice) {
        final Function function = new Function(
                FUNC_CREATEORDER,
                Arrays.<Type>asList(new Utf8String(_buyer),
                        new Utf8String(_seller),
                        new Utf8String(_time),
                        new Utf8String(_petId),
                        new Uint16(_petPrice)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple5<String, String, String, String, BigInteger> getCreateOrderInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEORDER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint16>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple5<String, String, String, String, BigInteger>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue()
        );
    }

    public RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>> orderList(BigInteger param0) {
        final Function function = new Function(FUNC_ORDERLIST,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint16>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteCall<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, BigInteger, BigInteger, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> userGetOrderByIndex(String _id, BigInteger _orderIndex) {
        final Function function = new Function(FUNC_USERGETORDERBYINDEX,
                Arrays.<Type>asList(new Utf8String(_id),
                        new Uint256(_orderIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint16>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptReturn(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void acceptReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String acceptReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_ACCEPTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getAcceptReturnInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ACCEPTRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<Boolean> getAcceptReturnOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ACCEPTRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
        );
    }

    public RemoteCall<List> adminGetOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETORDERINDEX,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> isPetOnReturn(String _petId) {
        final Function function = new Function(FUNC_ISPETONRETURN,
                Arrays.<Type>asList(new Utf8String(_petId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> stringEqual(String _a, String _b) {
        final Function function = new Function(FUNC_STRINGEQUAL,
                Arrays.<Type>asList(new Utf8String(_a),
                        new Utf8String(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>> adminGetOrderByIndex(BigInteger _orderIndex) {
        final Function function = new Function(FUNC_ADMINGETORDERBYINDEX,
                Arrays.<Type>asList(new Uint256(_orderIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint16>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple7<String, String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<List> adminGetReturnOrderIndex() {
        final Function function = new Function(FUNC_ADMINGETRETURNORDERINDEX,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING,
                Arrays.<Type>asList(new Uint256(_input)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> rejectReturn(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void rejectReturn(String _orderId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REJECTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String rejectReturnSeq(String _orderId) {
        final Function function = new Function(
                FUNC_REJECTRETURN,
                Arrays.<Type>asList(new Utf8String(_orderId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getRejectReturnInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REJECTRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public Tuple1<Boolean> getRejectReturnOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REJECTRETURN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
        );
    }

    public RemoteCall<List> userGetOrderIndex(String _id) {
        final Function function = new Function(FUNC_USERGETORDERINDEX,
                Arrays.<Type>asList(new Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setMarketAddress(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS,
                Arrays.<Type>asList(new Address(_mkAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setMarketAddress(String _mkAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS,
                Arrays.<Type>asList(new Address(_mkAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setMarketAddressSeq(String _mkAddress) {
        final Function function = new Function(
                FUNC_SETMARKETADDRESS,
                Arrays.<Type>asList(new Address(_mkAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetMarketAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETMARKETADDRESS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        ;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT,
                Arrays.<Type>asList(new Utf8String(_a),
                        new Utf8String(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<ApplyForReturnEventEventResponse> getApplyForReturnEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPLYFORRETURNEVENT_EVENT, transactionReceipt);
        ArrayList<ApplyForReturnEventEventResponse> responses = new ArrayList<ApplyForReturnEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApplyForReturnEventEventResponse typedResponse = new ApplyForReturnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._orderId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._reason = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerApplyForReturnEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPLYFORRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerApplyForReturnEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(APPLYFORRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<AcceptReturnEventEventResponse> getAcceptReturnEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ACCEPTRETURNEVENT_EVENT, transactionReceipt);
        ArrayList<AcceptReturnEventEventResponse> responses = new ArrayList<AcceptReturnEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AcceptReturnEventEventResponse typedResponse = new AcceptReturnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._orderId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerAcceptReturnEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACCEPTRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerAcceptReturnEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(ACCEPTRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    public List<RejectReturnEventEventResponse> getRejectReturnEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REJECTRETURNEVENT_EVENT, transactionReceipt);
        ArrayList<RejectReturnEventEventResponse> responses = new ArrayList<RejectReturnEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RejectReturnEventEventResponse typedResponse = new RejectReturnEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._orderId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerRejectReturnEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REJECTRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, fromBlock, toBlock, otherTopcs, callback);
    }

    public void registerRejectReturnEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REJECTRETURNEVENT_EVENT);
        registerEventLogPushFilter(ABI, BINARY, topic0, callback);
    }

    @Deprecated
    public static Order load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Order(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Order load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Order(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Order load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Order(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Order load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Order(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Order> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Order.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Order> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Order.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Order> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Order.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Order> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Order.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApplyForReturnEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _orderId;

        public String _reason;
    }

    public static class AcceptReturnEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _orderId;
    }

    public static class RejectReturnEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _orderId;
    }
}
