package org.fisco.bcos.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint16;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint8;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Market extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","8552505050505050905001915050604051809103902060001916846040516020018082805190602001908083835b60208310151561302c5780518252602082019150602081019050602083039250613007565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156130955780518252602082019150602081019050602083039250613070565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156138665761318e856003838154811015156130df57fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131845780601f1061315957610100808354040283529160200191613184565b820191906000526020600020905b81548152906001019060200180831161316757829003601f168201915b5050505050614571565b151515613203576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f596f752063616e27742062757920796f7572206f776e2070657421000000000081525060200191505060405180910390fd5b600160038281548110151561321457fe5b906000526020600020906007020160030160029054906101000a900460ff1660ff161415156132ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f5468697320706574206973206e6f7420666f722073616c65210000000000000081525060200191505060405180910390fd5b61339c856003838154811015156132be57fe5b90600052602060002090600702016006018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156133635780601f1061333857610100808354040283529160200191613363565b820191906000526020600020905b81548152906001019060200180831161334657829003601f168201915b505050505060038481548110151561337757fe5b906000526020600020906007020160030160009054906101000a900461ffff16612004565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166375aa8dae866003848154811015156133ea57fe5b9060005260206000209060070201600601868860038781548110151561340c57fe5b906000526020600020906007020160030160009054906101000a900461ffff166040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200180602001806020018661ffff1661ffff16815260200185810385528a818151815260200191508051906020019080838360005b838110156134b1578082015181840152602081019050613496565b50505050905090810190601f1680156134de5780820380516001836020036101000a031916815260200191505b508581038452898181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156135605780601f1061353557610100808354040283529160200191613560565b820191906000526020600020905b81548152906001019060200180831161354357829003601f168201915b5050858103835288818151815260200191508051906020019080838360005b8381101561359a57808201518184015260208101905061357f565b50505050905090810190601f1680156135c75780820380516001836020036101000a031916815260200191505b50858103825287818151815260200191508051906020019080838360005b838110156136005780820151818401526020810190506135e5565b50505050905090810190601f16801561362d5780820380516001836020036101000a031916815260200191505b509950505050505050505050600060405180830381600087803b15801561365357600080fd5b505af1158015613667573d6000803e3d6000fd5b505050508460038281548110151561367b57fe5b9060005260206000209060070201600601908051906020019061369f929190615646565b5060006003828154811015156136b157fe5b906000526020600020906007020160030160026101000a81548160ff021916908360ff1602179055507f4225dec3e6836a21bc51ce94921eb6037b42cb56580e4447d09a34aa221dba7960018686866040518085151515158152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015613752578082015181840152602081019050613737565b50505050905090810190601f16801561377f5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156137b857808201518184015260208101905061379d565b50505050905090810190601f1680156137e55780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561381e578082015181840152602081019050613803565b50505050905090810190601f16801561384b5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a1600191506139fb565b8080600101915050612eee565b7f4225dec3e6836a21bc51ce94921eb6037b42cb56580e4447d09a34aa221dba7960008686866040518085151515158152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156138eb5780820151818401526020810190506138d0565b50505050905090810190601f1680156139185780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015613951578082015181840152602081019050613936565b50505050905090810190601f16801561397e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156139b757808201518184015260208101905061399c565b50505050905090810190601f1680156139e45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a1600091505b509392505050565b613a15613a0f82611769565b84614571565b1515613a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f506574494420616e642066726f6d2d75736572206d69736d617463682100000081525060200191505060405180910390fd5b613a9381836154a4565b505050565b600080613aad613aa784611769565b85614571565b1515613b47576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f596f7520617265206e6f7420746865206f776e6572206f66207468697320706581526020017f742100000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386fc0c0e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613bf3578082015181840152602081019050613bd8565b50505050905090810190601f168015613c205780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015613c3f57600080fd5b505af1158015613c53573d6000803e3d6000fd5b505050506040513d6020811015613c6957600080fd5b810190808051906020019092919050505060ff16141515613cf2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f596f7572207065742069732063757272656e746c79206f6e2072657475726e2181525060200191505060405180910390fd5b600090505b6003805490508110156140e357600381815481101515613d1357fe5b90600052602060002090600702016001016040516020018082805460018160011615610100020316600290048015613d825780601f10613d60576101008083540402835291820191613d82565b820191906000526020600020905b815481529060010190602001808311613d6e575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515613dcb5780518252602082019150602081019050602083039250613da6565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515613e355780518252602082019150602081019050602083039250613e10565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515613e9e5780518252602082019150602081019050602083039250613e79565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614156140d6576000600382815481101515613ee657fe5b906000526020600020906007020160030160029054906101000a900460ff1660ff16141515613f7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f546869732070657420697320616c726561647920666f722073616c652100000081525060200191505060405180910390fd5b6001600382815481101515613f8e57fe5b906000526020600020906007020160030160026101000a81548160ff021916908360ff1602179055507f9950f3197b4bb60db39cd9652ea930bdcc77466d824791edfd98c26a0edb73d160","","5087810385528c818151815260200191508051906020019080838360005b83811015615012578082015181840152602081019050614ff7565b50505050905090810190601f16801561503f5780820380516001836020036101000a031916815260200191505b5087810384528b818151815260200191508051906020019080838360005b8381101561507857808201518184015260208101905061505d565b50505050905090810190601f1680156150a55780820380516001836020036101000a031916815260200191505b50878103835289818151815260200191508051906020019080838360005b838110156150de5780820151818401526020810190506150c3565b50505050905090810190601f16801561510b5780820380516001836020036101000a031916815260200191505b50878103825288818151815260200191508051906020019080838360005b83811015615144578082015181840152602081019050615129565b50505050905090810190601f1680156151715780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390a18192505050979650505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a51d246836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561524557808201518184015260208101905061522a565b50505050905090810190601f1680156152725780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561529157600080fd5b505af11580156152a5573d6000803e3d6000fd5b505050506040513d60208110156152bb57600080fd5b81019080805190602001909291905050509050919050565b606080606080606060008088955087945084518651016040519080825280601f01601f19166020018201604052801561531b5781602001602082028038833980820191505090505b50935083925060009150600090505b85518110156153dd57858181518110151561534157fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838060010194508151811015156153a057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505061532a565b600090505b84518110156154955784818151811015156153f957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838380600101945081518110151561545857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506153e2565b83965050505050505092915050565b60008090505b6003805490508110156155c157615579836003838154811015156154ca57fe5b90600052602060002090600702016001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561556f5780601f106155445761010080835404028352916020019161556f565b820191906000526020600020905b81548152906001019060200180831161555257829003601f168201915b5050505050614571565b156155b4578160038281548110151561558e57fe5b906000526020600020906007020160060190805190602001906155b2929190615646565b505b80806001019150506154aa565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061560757805160ff1916838001178555615635565b82800160010185558215615635579182015b82811115615634578251825591602001919060010190615619565b5b50905061564291906156ef565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061568757805160ff19168380011785556156b5565b828001600101855582156156b5579182015b828111156156b4578251825591602001919060010190615699565b5b5090506156c291906156ef565b5090565b61014060405190810160405280600a905b60608152602001906001900390816156d75790505090565b61571191905b8082111561570d5760008160009055506001016156f5565b5090565b905600a165627a7a72305820e60f4e6f596ee875c5b3102a17bf4c3d1aec3af6876aa4f54f53b8c003ad31d00029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint16\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_img\",\"type\":\"string\"},{\"name\":\"_intro\",\"type\":\"string\"}],\"name\":\"createPet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"setUserAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"getPetOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPetForSale\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"cancelSellPet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint16\"}],\"name\":\"pay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPetByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint16\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_orderAddress\",\"type\":\"address\"}],\"name\":\"setOrderAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_time\",\"type\":\"string\"}],\"name\":\"buyPet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"string\"},{\"name\":\"_to\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"changePetOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"sellPet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"getPetStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getPetIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"stringEqual\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_input\",\"type\":\"uint256\"}],\"name\":\"getIntToString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"},{\"name\":\"_petId\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_type\",\"type\":\"string\"},{\"name\":\"_price\",\"type\":\"uint16\"},{\"name\":\"_img\",\"type\":\"string\"},{\"name\":\"_intro\",\"type\":\"string\"}],\"name\":\"modifyPetInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"test\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"string\"},{\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_img\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_intro\",\"type\":\"string\"}],\"name\":\"CreatePetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_petId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_price\",\"type\":\"uint16\"},{\"indexed\":false,\"name\":\"_img\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_intro\",\"type\":\"string\"}],\"name\":\"ModifyPetInfoEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_petId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_time\",\"type\":\"string\"}],\"name\":\"BuyPetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"SellPetEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_ret\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_id\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"_petId\",\"type\":\"string\"}],\"name\":\"CancelSellPetEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_CREATEPET = "createPet";

    public static final String FUNC_SETUSERADDRESS = "setUserAddress";

    public static final String FUNC_GETPETOWNER = "getPetOwner";

    public static final String FUNC_GETPETFORSALE = "getPetForSale";

    public static final String FUNC_CANCELSELLPET = "cancelSellPet";

    public static final String FUNC_PAY = "pay";

    public static final String FUNC_GETPETBYINDEX = "getPetByIndex";

    public static final String FUNC_SETORDERADDRESS = "setOrderAddress";

    public static final String FUNC_BUYPET = "buyPet";

    public static final String FUNC_CHANGEPETOWNER = "changePetOwner";

    public static final String FUNC_SELLPET = "sellPet";

    public static final String FUNC_GETPETSTATUS = "getPetStatus";

    public static final String FUNC_GETPETINDEX = "getPetIndex";

    public static final String FUNC_STRINGEQUAL = "stringEqual";

    public static final String FUNC_GETINTTOSTRING = "getIntToString";

    public static final String FUNC_MODIFYPETINFO = "modifyPetInfo";

    public static final String FUNC_TEST = "test";

    public static final String FUNC_STRCONCAT = "strConcat";

    public static final Event CREATEPETEVENT_EVENT = new Event("CreatePetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event MODIFYPETINFOEVENT_EVENT = new Event("ModifyPetInfoEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event BUYPETEVENT_EVENT = new Event("BuyPetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event SELLPETEVENT_EVENT = new Event("SellPetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CANCELSELLPETEVENT_EVENT = new Event("CancelSellPetEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Market(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> createPet(String _id, String _type, BigInteger _price, String _name, String _img, String _intro) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_name),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createPet(String _id, String _type, BigInteger _price, String _name, String _img, String _intro, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_name),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createPetSeq(String _id, String _type, BigInteger _price, String _name, String _img, String _intro) {
        final Function function = new Function(
                FUNC_CREATEPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_name),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<String, String, BigInteger, String, String, String> getCreatePetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple6<String, String, BigInteger, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple1<Boolean> getCreatePetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> setUserAddress(String _userAddress) {
        final Function function = new Function(
                FUNC_SETUSERADDRESS, 
                Arrays.<Type>asList(new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setUserAddress(String _userAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETUSERADDRESS, 
                Arrays.<Type>asList(new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setUserAddressSeq(String _userAddress) {
        final Function function = new Function(
                FUNC_SETUSERADDRESS, 
                Arrays.<Type>asList(new Address(_userAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetUserAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETUSERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<String> getPetOwner(String _petId) {
        final Function function = new Function(FUNC_GETPETOWNER, 
                Arrays.<Type>asList(new Utf8String(_petId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getPetForSale() {
        final Function function = new Function(FUNC_GETPETFORSALE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> cancelSellPet(String _id, String _petId) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelSellPet(String _id, String _petId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelSellPetSeq(String _id, String _petId) {
        final Function function = new Function(
                FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getCancelSellPetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCancelSellPetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CANCELSELLPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> pay(String _from, String _to, BigInteger _price) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Uint16(_price)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void pay(String _from, String _to, BigInteger _price, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Uint16(_price)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String paySeq(String _from, String _to, BigInteger _price) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Uint16(_price)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getPayInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<Tuple7<String, String, BigInteger, String, BigInteger, String, String>> getPetByIndex(String _id, BigInteger _index) {
        final Function function = new Function(FUNC_GETPETBYINDEX, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Uint256(_index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<String, String, BigInteger, String, BigInteger, String, String>>(
                new Callable<Tuple7<String, String, BigInteger, String, BigInteger, String, String>>() {
                    @Override
                    public Tuple7<String, String, BigInteger, String, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, BigInteger, String, BigInteger, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setOrderAddress(String _orderAddress) {
        final Function function = new Function(
                FUNC_SETORDERADDRESS, 
                Arrays.<Type>asList(new Address(_orderAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setOrderAddress(String _orderAddress, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETORDERADDRESS, 
                Arrays.<Type>asList(new Address(_orderAddress)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setOrderAddressSeq(String _orderAddress) {
        final Function function = new Function(
                FUNC_SETORDERADDRESS, 
                Arrays.<Type>asList(new Address(_orderAddress)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetOrderAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETORDERADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> buyPet(String _id, String _petId, String _time) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void buyPet(String _id, String _petId, String _time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String buyPetSeq(String _id, String _petId, String _time) {
        final Function function = new Function(
                FUNC_BUYPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_time)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getBuyPetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getBuyPetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUYPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> changePetOwner(String _from, String _to, String _petId) {
        final Function function = new Function(
                FUNC_CHANGEPETOWNER, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void changePetOwner(String _from, String _to, String _petId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEPETOWNER, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String changePetOwnerSeq(String _from, String _to, String _petId) {
        final Function function = new Function(
                FUNC_CHANGEPETOWNER, 
                Arrays.<Type>asList(new Utf8String(_from),
                new Utf8String(_to),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getChangePetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEPETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> sellPet(String _id, String _petId) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void sellPet(String _id, String _petId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String sellPetSeq(String _id, String _petId) {
        final Function function = new Function(
                FUNC_SELLPET, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getSellPetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SELLPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSellPetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SELLPET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> getPetStatus(String _petId) {
        final Function function = new Function(FUNC_GETPETSTATUS, 
                Arrays.<Type>asList(new Utf8String(_petId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List> getPetIndex(String _id) {
        final Function function = new Function(FUNC_GETPETINDEX, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<Boolean> stringEqual(String _a, String _b) {
        final Function function = new Function(FUNC_STRINGEQUAL, 
                Arrays.<Type>asList(new Utf8String(_a),
                new Utf8String(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> getIntToString(BigInteger _input) {
        final Function function = new Function(FUNC_GETINTTOSTRING, 
                Arrays.<Type>asList(new Uint256(_input)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> modifyPetInfo(String _id, String _petId, String _name, String _type, BigInteger _price, String _img, String _intro) {
        final Function function = new Function(
                FUNC_MODIFYPETINFO, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_name),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void modifyPetInfo(String _id, String _petId, String _name, String _type, BigInteger _price, String _img, String _intro, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_MODIFYPETINFO, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_name),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String modifyPetInfoSeq(String _id, String _petId, String _name, String _type, BigInteger _price, String _img, String _intro) {
        final Function function = new Function(
                FUNC_MODIFYPETINFO, 
                Arrays.<Type>asList(new Utf8String(_id),
                new Utf8String(_petId),
                new Utf8String(_name),
                new Utf8String(_type),
                new Uint16(_price),
                new Utf8String(_img),
                new Utf8String(_intro)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple7<String, String, String, String, BigInteger, String, String> getModifyPetInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MODIFYPETINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint16>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple7<String, String, String, String, BigInteger, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public Tuple1<Boolean> getModifyPetInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_MODIFYPETINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> test(String _id) {
        final Function function = new Function(
                FUNC_TEST, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void test(String _id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_TEST, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String testSeq(String _id) {
        final Function function = new Function(
                FUNC_TEST, 
                Arrays.<Type>asList(new Utf8String(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getTestInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getTestOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        final Function function = new Function(FUNC_STRCONCAT, 
                Arrays.<Type>asList(new Utf8String(_a),
                new Utf8String(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<CreatePetEventEventResponse> getCreatePetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEPETEVENT_EVENT, transactionReceipt);
        ArrayList<CreatePetEventEventResponse> responses = new ArrayList<CreatePetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CreatePetEventEventResponse typedResponse = new CreatePetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._type = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._price = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._img = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._intro = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerCreatePetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerCreatePetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<ModifyPetInfoEventEventResponse> getModifyPetInfoEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYPETINFOEVENT_EVENT, transactionReceipt);
        ArrayList<ModifyPetInfoEventEventResponse> responses = new ArrayList<ModifyPetInfoEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ModifyPetInfoEventEventResponse typedResponse = new ModifyPetInfoEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._petId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._name = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._type = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse._price = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse._img = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse._intro = (String) eventValues.getNonIndexedValues().get(7).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerModifyPetInfoEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(MODIFYPETINFOEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerModifyPetInfoEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(MODIFYPETINFOEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<BuyPetEventEventResponse> getBuyPetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BUYPETEVENT_EVENT, transactionReceipt);
        ArrayList<BuyPetEventEventResponse> responses = new ArrayList<BuyPetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BuyPetEventEventResponse typedResponse = new BuyPetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._petId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._time = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerBuyPetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUYPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerBuyPetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(BUYPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<SellPetEventEventResponse> getSellPetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SELLPETEVENT_EVENT, transactionReceipt);
        ArrayList<SellPetEventEventResponse> responses = new ArrayList<SellPetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SellPetEventEventResponse typedResponse = new SellPetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._petId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerSellPetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SELLPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerSellPetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(SELLPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CancelSellPetEventEventResponse> getCancelSellPetEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELSELLPETEVENT_EVENT, transactionReceipt);
        ArrayList<CancelSellPetEventEventResponse> responses = new ArrayList<CancelSellPetEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CancelSellPetEventEventResponse typedResponse = new CancelSellPetEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._ret = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._petId = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerCancelSellPetEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CANCELSELLPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerCancelSellPetEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CANCELSELLPETEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Market(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Market load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Market load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Market(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Market.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Market> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Market.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CreatePetEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _type;

        public BigInteger _price;

        public String _name;

        public String _img;

        public String _intro;
    }

    public static class ModifyPetInfoEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _petId;

        public String _name;

        public String _type;

        public BigInteger _price;

        public String _img;

        public String _intro;
    }

    public static class BuyPetEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _petId;

        public String _time;
    }

    public static class SellPetEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _petId;
    }

    public static class CancelSellPetEventEventResponse {
        public Log log;

        public Boolean _ret;

        public String _id;

        public String _petId;
    }
}
